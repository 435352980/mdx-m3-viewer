/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
let jass = (function() {
    let o = function(k, v, o, l) {
 for (o = o || {}, l = k.length; l--; o[k[l]] = v); return o;
}, $V0 = [1, 4], $V1 = [1, 11], $V2 = [1, 12], $V3 = [1, 13], $V4 = [1, 9], $V5 = [1, 10], $V6 = [6, 11, 12, 18, 21, 29], $V7 = [1, 19], $V8 = [1, 18], $V9 = [11, 19, 23], $Va = [1, 40], $Vb = [1, 38], $Vc = [1, 48], $Vd = [1, 50], $Ve = [1, 47], $Vf = [1, 46], $Vg = [1, 45], $Vh = [1, 51], $Vi = [16, 35], $Vj = [1, 58], $Vk = [1, 59], $Vl = [1, 60], $Vm = [1, 61], $Vn = [1, 62], $Vo = [1, 63], $Vp = [1, 64], $Vq = [1, 65], $Vr = [1, 66], $Vs = [1, 67], $Vt = [1, 68], $Vu = [1, 69], $Vv = [11, 19, 23, 31, 35, 38, 39, 41, 42, 44, 45, 47, 48, 49, 50, 51, 53, 54, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70], $Vw = [1, 74], $Vx = [1, 78], $Vy = [1, 79], $Vz = [11, 19, 23, 31, 35, 38, 39, 41, 42, 44, 45, 47, 48, 49, 50, 51, 53, 54, 57, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70], $VA = [2, 30], $VB = [1, 103], $VC = [1, 104], $VD = [1, 105], $VE = [1, 106], $VF = [1, 107], $VG = [1, 108], $VH = [1, 109], $VI = [6, 11, 12, 18, 21, 29, 31, 38, 42, 45, 47, 48, 50, 51], $VJ = [11, 19, 23, 31, 35, 38, 39, 41, 42, 44, 45, 47, 48, 49, 50, 51, 53, 54, 57, 63, 64, 65, 66, 67, 68, 69, 70], $VK = [11, 19, 23, 31, 35, 38, 39, 41, 42, 44, 45, 47, 48, 49, 50, 51, 53, 54, 57, 69, 70], $VL = [35, 57], $VM = [31, 38, 41, 42, 45, 47, 48, 49, 50, 51, 53, 54], $VN = [41, 53, 54], $VO = [2, 46], $VP = [1, 138], $VQ = [1, 139];
    let parser = {
        trace: function trace() { },
        yy: {},
        symbols_: {'error': 2, 'Program': 3, 'Blocks': 4, 'Block': 5, 'EOF': 6, 'Globals': 7, 'Function': 8, 'Native': 9, 'TypeDefinition': 10, 'constant': 11, 'native': 12, 'IDENT': 13, 'takes': 14, 'FunctionArguments': 15, 'returns': 16, 'FunctionReturn': 17, 'type': 18, 'TYPE': 19, 'extends': 20, 'globals': 21, 'GlobalVariableDefinitions': 22, 'endglobals': 23, 'GlobalVariableDefinition': 24, 'array': 25, '=': 26, 'Expression': 27, 'Functions': 28, 'function': 29, 'Statements': 30, 'endfunction': 31, 'ArgumentList': 32, 'nothing': 33, 'Argument': 34, ',': 35, 'StatementsReal': 36, 'Statement': 37, 'if': 38, 'then': 39, 'Elses': 40, 'endif': 41, 'set': 42, '[': 43, ']': 44, 'call': 45, 'FunctionCall': 46, 'return': 47, 'loop': 48, 'endloop': 49, 'exitwhen': 50, 'local': 51, 'ElseIf': 52, 'else': 53, 'elseif': 54, '(': 55, 'FunctionCallArguments': 56, ')': 57, 'Expressions': 58, '+': 59, '-': 60, '*': 61, '/': 62, '<': 63, '>': 64, '>=': 65, '<=': 66, '==': 67, '!=': 68, 'and': 69, 'or': 70, 'not': 71, 'LITERAL': 72, '$accept': 0, '$end': 1},
        terminals_: {2: 'error', 6: 'EOF', 11: 'constant', 12: 'native', 13: 'IDENT', 14: 'takes', 16: 'returns', 18: 'type', 19: 'TYPE', 20: 'extends', 21: 'globals', 23: 'endglobals', 25: 'array', 26: '=', 29: 'function', 31: 'endfunction', 33: 'nothing', 35: ',', 38: 'if', 39: 'then', 41: 'endif', 42: 'set', 43: '[', 44: ']', 45: 'call', 47: 'return', 48: 'loop', 49: 'endloop', 50: 'exitwhen', 51: 'local', 53: 'else', 54: 'elseif', 55: '(', 57: ')', 59: '+', 60: '-', 61: '*', 62: '/', 63: '<', 64: '>', 65: '>=', 66: '<=', 67: '==', 68: '!=', 69: 'and', 70: 'or', 71: 'not', 72: 'LITERAL'},
        productions_: [0, [3, 1], [4, 2], [4, 1], [5, 1], [5, 1], [5, 1], [5, 1], [9, 7], [9, 6], [10, 4], [7, 3], [7, 2], [22, 2], [22, 1], [24, 3], [24, 2], [24, 4], [24, 5], [28, 1], [28, 2], [8, 8], [15, 1], [15, 1], [32, 1], [32, 3], [34, 2], [17, 1], [17, 1], [30, 1], [30, 0], [36, 1], [36, 2], [37, 6], [37, 4], [37, 7], [37, 2], [37, 2], [37, 1], [37, 3], [37, 2], [37, 4], [37, 5], [37, 3], [40, 2], [40, 2], [40, 0], [52, 4], [46, 4], [56, 1], [56, 0], [58, 1], [58, 3], [27, 3], [27, 3], [27, 3], [27, 3], [27, 3], [27, 3], [27, 3], [27, 3], [27, 3], [27, 3], [27, 3], [27, 3], [27, 2], [27, 2], [27, 3], [27, 4], [27, 1], [27, 1], [27, 2], [27, 1]],
        performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
            /* this == yyval */

            let $0 = $$.length - 1;
            switch (yystate) {
                case 1:

                    return new ast.Program({
                        line: yylineno,
                        blocks: $$[$0],
                    });

                    break;
                case 2:

                    this.$ = [$$[$0 - 1]].concat($$[$0]);

                    break;
                case 3: case 12: case 23: case 30: case 46: case 50:

                    this.$ = [];

                    break;
                case 4:

                    this.$ = new ast.Globals({
                        line: yylineno,
                        variables: $$[$0],
                    });

                    break;
                case 5: case 6: case 7: case 27: case 28: case 45: case 70:

                    this.$ = $$[$0];

                    break;
                case 8:

                    this.$ = new ast.Native({
                        line: yylineno,
                        name: $$[$0 - 4],
                        args: $$[$0 - 2],
                        returnType: $$[$0],
                    });
                    this.$.isConstant = true;

                    break;
                case 9:

                    this.$ = new ast.Native({
                        line: yylineno,
                        name: $$[$0 - 4],
                        args: $$[$0 - 2],
                        returnType: $$[$0],
                    });

                    break;
                case 10:

                    this.$ = new ast.Type({
                        line: yylineno,
                        name: $$[$0 - 2],
                        extends: $$[$0],
                    });

                    break;
                case 11: case 67:

                    this.$ = $$[$0 - 1];

                    break;
                case 13: case 20: case 32:

                    this.$ = $$[$0 - 1].concat($$[$0]);

                    break;
                case 14: case 19: case 24: case 31: case 51:

                    this.$ = [$$[$0]];

                    break;
                case 15:

                    this.$ = new ast.VariableDefinition({
                        line: yylineno,
                        type: $$[$0 - 2],
                        name: $$[$0],
                        value: null,
                    });
                    this.$.isArray = true;

                    break;
                case 16:

                    this.$ = new ast.VariableDefinition({
                        line: yylineno,
                        type: $$[$0 - 1],
                        name: $$[$0],
                        value: null,
                    });

                    break;
                case 17:

                    this.$ = new ast.VariableDefinition({
                        line: yylineno,
                        type: $$[$0 - 3],
                        name: $$[$0 - 2],
                        value: $$[$0],
                    });

                    break;
                case 18:

                    this.$ = new ast.VariableDefinition({
                        line: yylineno,
                        type: $$[$0 - 3],
                        name: $$[$0 - 2],
                        value: $$[$0],
                    });
                    this.$.isConstant = true;

                    break;
                case 21:

                    this.$ = new ast.FunctionDefinition({
                        line: yylineno,
                        name: $$[$0 - 6],
                        args: $$[$0 - 4],
                        returnType: $$[$0 - 2],
                        body: $$[$0 - 1],
                    });

                    break;
                case 25: case 52:

                    this.$ = $$[$0 - 2].concat($$[$0]);

                    break;
                case 26:

                    this.$ = new ast.FunctionArgument({
                        line: yylineno,
                        type: $$[$0 - 1],
                        name: $$[$0],
                    });

                    break;
                case 33:

                    this.$ = new ast.IfThenElse({
                        line: yylineno,
                        condition: $$[$0 - 4],
                        thenActions: $$[$0 - 2],
                        elseActions: $$[$0 - 1],
                    });

                    break;
                case 34:

                    this.$ = new ast.SetVariable({
                        line: yylineno,
                        name: $$[$0 - 2],
                        value: $$[$0],
                    });

                    break;
                case 35:

                    this.$ = new ast.SetVariableArray({
                        line: yylineno,
                        name: $$[$0 - 5],
                        index: $$[$0 - 3],
                        value: $$[$0],
                    });

                    break;
                case 36:

                    this.$ = new ast.FunctionCallStatement({
                        line: yylineno,
                        functionCall: $$[$0],
                    });

                    break;
                case 37:

                    this.$ = new ast.Return({
                        line: yylineno,
                        value: $$[$0],
                    });

                    break;
                case 38:

                    this.$ = new ast.Return({
                        line: yylineno,
                        value: null,
                    });

                    break;
                case 39:

                    this.$ = new ast.Loop({
                        line: yylineno,
                        actions: $$[$0 - 1],
                    });

                    break;
                case 40:

                    this.$ = new ast.ExitWhen({
                        line: yylineno,
                        condition: $$[$0],
                    });

                    break;
                case 41:

                    this.$ = new ast.VariableDefinition({
                        line: yylineno,
                        type: $$[$0 - 2],
                        name: $$[$0],
                        value: null,
                    });
                    this.$.isLocal = true;
                    this.$.isArray = true;

                    break;
                case 42:

                    this.$ = new ast.VariableDefinition({
                        line: yylineno,
                        type: $$[$0 - 3],
                        name: $$[$0 - 2],
                        value: $$[$0],
                    });
                    this.$.isLocal = true;

                    break;
                case 43:

                    this.$ = new ast.VariableDefinition({
                        line: yylineno,
                        type: $$[$0 - 1],
                        name: $$[$0],
                        value: null,
                    });
                    this.$.isLocal = true;

                    break;
                case 44:

                    $$[$0 - 1].elseActions = $$[$0];
                    this.$ = [$$[$0 - 1]];

                    break;
                case 47:

                    this.$ = new ast.IfThenElse({
                        line: yylineno,
                        condition: $$[$0 - 2],
                        thenActions: $$[$0],
                        elseActions: [],
                    });

                    break;
                case 48:

                    this.$ = new ast.FunctionCall({
                        line: yylineno,
                        name: $$[$0 - 3],
                        args: $$[$0 - 1],
                    });

                    break;
                case 53: case 54: case 55: case 56: case 57: case 58: case 59: case 60: case 61: case 62: case 63: case 64:

                    this.$ = new ast.Infix({
                        line: yylineno,
                        lhs: $$[$0 - 2],
                        rhs: $$[$0],
                        operator: $$[$0 - 1],
                    });

                    break;
                case 65: case 66:

                    this.$ = new ast.Unary({
                        line: yylineno,
                        value: $$[$0],
                        operator: $$[$0 - 1],
                    });

                    break;
                case 68:

                    this.$ = new ast.GetVariableArray({
                        line: yylineno,
                        name: $$[$0 - 3],
                        index: $$[$0 - 1],
                    });

                    break;
                case 69:

                    this.$ = new ast.GetVariable({
                        line: yylineno,
                        name: $$[$0],
                    });

                    break;
                case 71:

                    this.$ = new ast.FunctionReference({
                        line: yylineno,
                        name: $$[$0],
                    });

                    break;
                case 72:

                    literalValue = util.literalValue($$[$0]);
                    this.$ = new ast.Literal({
                        line: yylineno,
                        type: literalValue.type,
                        value: literalValue.value,
                    });

                    break;
            }
        },
        table: [{3: 1, 4: 2, 5: 3, 6: $V0, 7: 5, 8: 6, 9: 7, 10: 8, 11: $V1, 12: $V2, 18: $V3, 21: $V4, 29: $V5}, {1: [3]}, {1: [2, 1]}, {4: 14, 5: 3, 6: $V0, 7: 5, 8: 6, 9: 7, 10: 8, 11: $V1, 12: $V2, 18: $V3, 21: $V4, 29: $V5}, {1: [2, 3]}, o($V6, [2, 4]), o($V6, [2, 5]), o($V6, [2, 6]), o($V6, [2, 7]), {11: $V7, 19: $V8, 22: 15, 23: [1, 16], 24: 17}, {13: [1, 20]}, {12: [1, 21]}, {13: [1, 22]}, {19: [1, 23]}, {1: [2, 2]}, {11: $V7, 19: $V8, 23: [1, 24], 24: 25}, o($V6, [2, 12]), o($V9, [2, 14]), {13: [1, 27], 25: [1, 26]}, {19: [1, 28]}, {14: [1, 29]}, {13: [1, 30]}, {14: [1, 31]}, {20: [1, 32]}, o($V6, [2, 11]), o($V9, [2, 13]), {13: [1, 33]}, o($V9, [2, 16], {26: [1, 34]}), {13: [1, 35]}, {15: 36, 19: $Va, 32: 37, 33: $Vb, 34: 39}, {14: [1, 41]}, {15: 42, 19: $Va, 32: 37, 33: $Vb, 34: 39}, {19: [1, 43]}, o($V9, [2, 15]), {13: $Vc, 27: 44, 29: $Vd, 46: 49, 55: $Ve, 60: $Vf, 71: $Vg, 72: $Vh}, {26: [1, 52]}, {16: [1, 53]}, {16: [2, 22], 35: [1, 54]}, {16: [2, 23]}, o($Vi, [2, 24]), {13: [1, 55]}, {15: 56, 19: $Va, 32: 37, 33: $Vb, 34: 39}, {16: [1, 57]}, o($V6, [2, 10]), o($V9, [2, 17], {59: $Vj, 60: $Vk, 61: $Vl, 62: $Vm, 63: $Vn, 64: $Vo, 65: $Vp, 66: $Vq, 67: $Vr, 68: $Vs, 69: $Vt, 70: $Vu}), {13: $Vc, 27: 70, 29: $Vd, 46: 49, 55: $Ve, 60: $Vf, 71: $Vg, 72: $Vh}, {13: $Vc, 27: 71, 29: $Vd, 46: 49, 55: $Ve, 60: $Vf, 71: $Vg, 72: $Vh}, {13: $Vc, 27: 72, 29: $Vd, 46: 49, 55: $Ve, 60: $Vf, 71: $Vg, 72: $Vh}, o($Vv, [2, 69], {43: [1, 73], 55: $Vw}), o($Vv, [2, 70]), {13: [1, 75]}, o($Vv, [2, 72]), {13: $Vc, 27: 76, 29: $Vd, 46: 49, 55: $Ve, 60: $Vf, 71: $Vg, 72: $Vh}, {17: 77, 19: $Vx, 33: $Vy}, {19: $Va, 34: 80}, o($Vi, [2, 26]), {16: [1, 81]}, {17: 82, 19: $Vx, 33: $Vy}, {13: $Vc, 27: 83, 29: $Vd, 46: 49, 55: $Ve, 60: $Vf, 71: $Vg, 72: $Vh}, {13: $Vc, 27: 84, 29: $Vd, 46: 49, 55: $Ve, 60: $Vf, 71: $Vg, 72: $Vh}, {13: $Vc, 27: 85, 29: $Vd, 46: 49, 55: $Ve, 60: $Vf, 71: $Vg, 72: $Vh}, {13: $Vc, 27: 86, 29: $Vd, 46: 49, 55: $Ve, 60: $Vf, 71: $Vg, 72: $Vh}, {13: $Vc, 27: 87, 29: $Vd, 46: 49, 55: $Ve, 60: $Vf, 71: $Vg, 72: $Vh}, {13: $Vc, 27: 88, 29: $Vd, 46: 49, 55: $Ve, 60: $Vf, 71: $Vg, 72: $Vh}, {13: $Vc, 27: 89, 29: $Vd, 46: 49, 55: $Ve, 60: $Vf, 71: $Vg, 72: $Vh}, {13: $Vc, 27: 90, 29: $Vd, 46: 49, 55: $Ve, 60: $Vf, 71: $Vg, 72: $Vh}, {13: $Vc, 27: 91, 29: $Vd, 46: 49, 55: $Ve, 60: $Vf, 71: $Vg, 72: $Vh}, {13: $Vc, 27: 92, 29: $Vd, 46: 49, 55: $Ve, 60: $Vf, 71: $Vg, 72: $Vh}, {13: $Vc, 27: 93, 29: $Vd, 46: 49, 55: $Ve, 60: $Vf, 71: $Vg, 72: $Vh}, {13: $Vc, 27: 94, 29: $Vd, 46: 49, 55: $Ve, 60: $Vf, 71: $Vg, 72: $Vh}, o($Vv, [2, 65]), o($Vz, [2, 66], {61: $Vl, 62: $Vm}), {57: [1, 95], 59: $Vj, 60: $Vk, 61: $Vl, 62: $Vm, 63: $Vn, 64: $Vo, 65: $Vp, 66: $Vq, 67: $Vr, 68: $Vs, 69: $Vt, 70: $Vu}, {13: $Vc, 27: 96, 29: $Vd, 46: 49, 55: $Ve, 60: $Vf, 71: $Vg, 72: $Vh}, {13: $Vc, 27: 99, 29: $Vd, 46: 49, 55: $Ve, 56: 97, 57: [2, 50], 58: 98, 60: $Vf, 71: $Vg, 72: $Vh}, o($Vv, [2, 71]), o($V9, [2, 18], {59: $Vj, 60: $Vk, 61: $Vl, 62: $Vm, 63: $Vn, 64: $Vo, 65: $Vp, 66: $Vq, 67: $Vr, 68: $Vs, 69: $Vt, 70: $Vu}), {30: 100, 31: $VA, 36: 101, 37: 102, 38: $VB, 42: $VC, 45: $VD, 47: $VE, 48: $VF, 50: $VG, 51: $VH}, o($VI, [2, 27]), o($VI, [2, 28]), o($Vi, [2, 25]), {17: 110, 19: $Vx, 33: $Vy}, o($V6, [2, 9]), o($Vz, [2, 53], {61: $Vl, 62: $Vm}), o($Vz, [2, 54], {61: $Vl, 62: $Vm}), o($Vv, [2, 55]), o($Vv, [2, 56]), o($VJ, [2, 57], {59: $Vj, 60: $Vk, 61: $Vl, 62: $Vm}), o($VJ, [2, 58], {59: $Vj, 60: $Vk, 61: $Vl, 62: $Vm}), o($VJ, [2, 59], {59: $Vj, 60: $Vk, 61: $Vl, 62: $Vm}), o($VJ, [2, 60], {59: $Vj, 60: $Vk, 61: $Vl, 62: $Vm}), o($VJ, [2, 61], {59: $Vj, 60: $Vk, 61: $Vl, 62: $Vm}), o($VJ, [2, 62], {59: $Vj, 60: $Vk, 61: $Vl, 62: $Vm}), o($VK, [2, 63], {59: $Vj, 60: $Vk, 61: $Vl, 62: $Vm, 63: $Vn, 64: $Vo, 65: $Vp, 66: $Vq, 67: $Vr, 68: $Vs}), o($VK, [2, 64], {59: $Vj, 60: $Vk, 61: $Vl, 62: $Vm, 63: $Vn, 64: $Vo, 65: $Vp, 66: $Vq, 67: $Vr, 68: $Vs}), o($Vv, [2, 67]), {44: [1, 111], 59: $Vj, 60: $Vk, 61: $Vl, 62: $Vm, 63: $Vn, 64: $Vo, 65: $Vp, 66: $Vq, 67: $Vr, 68: $Vs, 69: $Vt, 70: $Vu}, {57: [1, 112]}, {35: [1, 113], 57: [2, 49]}, o($VL, [2, 51], {59: $Vj, 60: $Vk, 61: $Vl, 62: $Vm, 63: $Vn, 64: $Vo, 65: $Vp, 66: $Vq, 67: $Vr, 68: $Vs, 69: $Vt, 70: $Vu}), {31: [1, 114]}, o([31, 41, 49, 53, 54], [2, 29], {37: 115, 38: $VB, 42: $VC, 45: $VD, 47: $VE, 48: $VF, 50: $VG, 51: $VH}), o($VM, [2, 31]), {13: $Vc, 27: 116, 29: $Vd, 46: 49, 55: $Ve, 60: $Vf, 71: $Vg, 72: $Vh}, {13: [1, 117]}, {13: [1, 119], 46: 118}, o($VM, [2, 38], {46: 49, 27: 120, 13: $Vc, 29: $Vd, 55: $Ve, 60: $Vf, 71: $Vg, 72: $Vh}), {30: 121, 36: 101, 37: 102, 38: $VB, 42: $VC, 45: $VD, 47: $VE, 48: $VF, 49: $VA, 50: $VG, 51: $VH}, {13: $Vc, 27: 122, 29: $Vd, 46: 49, 55: $Ve, 60: $Vf, 71: $Vg, 72: $Vh}, {19: [1, 123]}, o($V6, [2, 8]), o($Vv, [2, 68]), o($Vv, [2, 48]), {13: $Vc, 27: 124, 29: $Vd, 46: 49, 55: $Ve, 60: $Vf, 71: $Vg, 72: $Vh}, o($V6, [2, 21]), o($VM, [2, 32]), {39: [1, 125], 59: $Vj, 60: $Vk, 61: $Vl, 62: $Vm, 63: $Vn, 64: $Vo, 65: $Vp, 66: $Vq, 67: $Vr, 68: $Vs, 69: $Vt, 70: $Vu}, {26: [1, 126], 43: [1, 127]}, o($VM, [2, 36]), {55: $Vw}, o($VM, [2, 37], {59: $Vj, 60: $Vk, 61: $Vl, 62: $Vm, 63: $Vn, 64: $Vo, 65: $Vp, 66: $Vq, 67: $Vr, 68: $Vs, 69: $Vt, 70: $Vu}), {49: [1, 128]}, o($VM, [2, 40], {59: $Vj, 60: $Vk, 61: $Vl, 62: $Vm, 63: $Vn, 64: $Vo, 65: $Vp, 66: $Vq, 67: $Vr, 68: $Vs, 69: $Vt, 70: $Vu}), {13: [1, 130], 25: [1, 129]}, o($VL, [2, 52], {59: $Vj, 60: $Vk, 61: $Vl, 62: $Vm, 63: $Vn, 64: $Vo, 65: $Vp, 66: $Vq, 67: $Vr, 68: $Vs, 69: $Vt, 70: $Vu}), o($VN, $VA, {36: 101, 37: 102, 30: 131, 38: $VB, 42: $VC, 45: $VD, 47: $VE, 48: $VF, 50: $VG, 51: $VH}), {13: $Vc, 27: 132, 29: $Vd, 46: 49, 55: $Ve, 60: $Vf, 71: $Vg, 72: $Vh}, {13: $Vc, 27: 133, 29: $Vd, 46: 49, 55: $Ve, 60: $Vf, 71: $Vg, 72: $Vh}, o($VM, [2, 39]), {13: [1, 134]}, o($VM, [2, 43], {26: [1, 135]}), {40: 136, 41: $VO, 52: 137, 53: $VP, 54: $VQ}, o($VM, [2, 34], {59: $Vj, 60: $Vk, 61: $Vl, 62: $Vm, 63: $Vn, 64: $Vo, 65: $Vp, 66: $Vq, 67: $Vr, 68: $Vs, 69: $Vt, 70: $Vu}), {44: [1, 140], 59: $Vj, 60: $Vk, 61: $Vl, 62: $Vm, 63: $Vn, 64: $Vo, 65: $Vp, 66: $Vq, 67: $Vr, 68: $Vs, 69: $Vt, 70: $Vu}, o($VM, [2, 41]), {13: $Vc, 27: 141, 29: $Vd, 46: 49, 55: $Ve, 60: $Vf, 71: $Vg, 72: $Vh}, {41: [1, 142]}, {40: 143, 41: $VO, 52: 137, 53: $VP, 54: $VQ}, {30: 144, 36: 101, 37: 102, 38: $VB, 41: $VA, 42: $VC, 45: $VD, 47: $VE, 48: $VF, 50: $VG, 51: $VH}, {13: $Vc, 27: 145, 29: $Vd, 46: 49, 55: $Ve, 60: $Vf, 71: $Vg, 72: $Vh}, {26: [1, 146]}, o($VM, [2, 42], {59: $Vj, 60: $Vk, 61: $Vl, 62: $Vm, 63: $Vn, 64: $Vo, 65: $Vp, 66: $Vq, 67: $Vr, 68: $Vs, 69: $Vt, 70: $Vu}), o($VM, [2, 33]), {41: [2, 44]}, {41: [2, 45]}, {39: [1, 147], 59: $Vj, 60: $Vk, 61: $Vl, 62: $Vm, 63: $Vn, 64: $Vo, 65: $Vp, 66: $Vq, 67: $Vr, 68: $Vs, 69: $Vt, 70: $Vu}, {13: $Vc, 27: 148, 29: $Vd, 46: 49, 55: $Ve, 60: $Vf, 71: $Vg, 72: $Vh}, o($VN, $VA, {36: 101, 37: 102, 30: 149, 38: $VB, 42: $VC, 45: $VD, 47: $VE, 48: $VF, 50: $VG, 51: $VH}), o($VM, [2, 35], {59: $Vj, 60: $Vk, 61: $Vl, 62: $Vm, 63: $Vn, 64: $Vo, 65: $Vp, 66: $Vq, 67: $Vr, 68: $Vs, 69: $Vt, 70: $Vu}), o($VN, [2, 47])],
        defaultActions: {2: [2, 1], 4: [2, 3], 14: [2, 2], 38: [2, 23], 143: [2, 44], 144: [2, 45]},
        parseError: function parseError(str, hash) {
            if (hash.recoverable) {
                this.trace(str);
            } else {
                function _parseError(msg, hash) {
                    this.message = msg;
                    this.hash = hash;
                }
                _parseError.prototype = Error;

                throw new _parseError(str, hash);
            }
        },
        parse: function parse(input) {
            let self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
            let args = lstack.slice.call(arguments, 1);
            let lexer = Object.create(this.lexer);
            let sharedState = {yy: {}};
            for (let k in this.yy) {
                if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
                    sharedState.yy[k] = this.yy[k];
                }
            }
            lexer.setInput(input, sharedState.yy);
            sharedState.yy.lexer = lexer;
            sharedState.yy.parser = this;
            if (typeof lexer.yylloc == 'undefined') {
                lexer.yylloc = {};
            }
            let yyloc = lexer.yylloc;
            lstack.push(yyloc);
            let ranges = lexer.options && lexer.options.ranges;
            if (typeof sharedState.yy.parseError === 'function') {
                this.parseError = sharedState.yy.parseError;
            } else {
                this.parseError = Object.getPrototypeOf(this).parseError;
            }
            function popStack(n) {
                stack.length = stack.length - 2 * n;
                vstack.length = vstack.length - n;
                lstack.length = lstack.length - n;
            }
            _token_stack:
            var lex = function() {
                let token;
                token = lexer.lex() || EOF;
                if (typeof token !== 'number') {
                    token = self.symbols_[token] || token;
                }
                return token;
            };
            let symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
            while (true) {
                state = stack[stack.length - 1];
                if (this.defaultActions[state]) {
                    action = this.defaultActions[state];
                } else {
                    if (symbol === null || typeof symbol == 'undefined') {
                        symbol = lex();
                    }
                    action = table[state] && table[state][symbol];
                }
                if (typeof action === 'undefined' || !action.length || !action[0]) {
                    let errStr = '';
                    expected = [];
                    for (p in table[state]) {
                        if (this.terminals_[p] && p > TERROR) {
                            expected.push('\'' + this.terminals_[p] + '\'');
                        }
                    }
                    if (lexer.showPosition) {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                    } else {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                    }
                    this.parseError(errStr, {
                        text: lexer.match,
                        token: this.terminals_[symbol] || symbol,
                        line: lexer.yylineno,
                        loc: yyloc,
                        expected: expected,
                    });
                }
                if (action[0] instanceof Array && action.length > 1) {
                    throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
                }
                switch (action[0]) {
                    case 1:
                        stack.push(symbol);
                        vstack.push(lexer.yytext);
                        lstack.push(lexer.yylloc);
                        stack.push(action[1]);
                        symbol = null;
                        if (!preErrorSymbol) {
                            yyleng = lexer.yyleng;
                            yytext = lexer.yytext;
                            yylineno = lexer.yylineno;
                            yyloc = lexer.yylloc;
                            if (recovering > 0) {
                                recovering--;
                            }
                        } else {
                            symbol = preErrorSymbol;
                            preErrorSymbol = null;
                        }
                        break;
                    case 2:
                        len = this.productions_[action[1]][1];
                        yyval.$ = vstack[vstack.length - len];
                        yyval._$ = {
                            first_line: lstack[lstack.length - (len || 1)].first_line,
                            last_line: lstack[lstack.length - 1].last_line,
                            first_column: lstack[lstack.length - (len || 1)].first_column,
                            last_column: lstack[lstack.length - 1].last_column,
                        };
                        if (ranges) {
                            yyval._$.range = [
                                lstack[lstack.length - (len || 1)].range[0],
                                lstack[lstack.length - 1].range[1],
                            ];
                        }
                        r = this.performAction.apply(yyval, [
                            yytext,
                            yyleng,
                            yylineno,
                            sharedState.yy,
                            action[1],
                            vstack,
                            lstack,
                        ].concat(args));
                        if (typeof r !== 'undefined') {
                            return r;
                        }
                        if (len) {
                            stack = stack.slice(0, -1 * len * 2);
                            vstack = vstack.slice(0, -1 * len);
                            lstack = lstack.slice(0, -1 * len);
                        }
                        stack.push(this.productions_[action[1]][0]);
                        vstack.push(yyval.$);
                        lstack.push(yyval._$);
                        newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                        stack.push(newState);
                        break;
                    case 3:
                        return true;
                }
            }
            return true;
        },
    };


    var ast = require('./ast');
    var util = require('./util');
    /* generated by jison-lex 0.3.4 */
    let lexer = (function() {
        let lexer = ({

            EOF: 1,

            parseError: function parseError(str, hash) {
                if (this.yy.parser) {
                    this.yy.parser.parseError(str, hash);
                } else {
                    throw new Error(str);
                }
            },

            // resets the lexer, sets new input
            setInput: function(input, yy) {
                this.yy = yy || this.yy || {};
                this._input = input;
                this._more = this._backtrack = this.done = false;
                this.yylineno = this.yyleng = 0;
                this.yytext = this.matched = this.match = '';
                this.conditionStack = ['INITIAL'];
                this.yylloc = {
                    first_line: 1,
                    first_column: 0,
                    last_line: 1,
                    last_column: 0,
                };
                if (this.options.ranges) {
                    this.yylloc.range = [0, 0];
                }
                this.offset = 0;
                return this;
            },

            // consumes and returns one char from the input
            input: function() {
                let ch = this._input[0];
                this.yytext += ch;
                this.yyleng++;
                this.offset++;
                this.match += ch;
                this.matched += ch;
                let lines = ch.match(/(?:\r\n?|\n).*/g);
                if (lines) {
                    this.yylineno++;
                    this.yylloc.last_line++;
                } else {
                    this.yylloc.last_column++;
                }
                if (this.options.ranges) {
                    this.yylloc.range[1]++;
                }

                this._input = this._input.slice(1);
                return ch;
            },

            // unshifts one char (or a string) into the input
            unput: function(ch) {
                let len = ch.length;
                let lines = ch.split(/(?:\r\n?|\n)/g);

                this._input = ch + this._input;
                this.yytext = this.yytext.substr(0, this.yytext.length - len);
                // this.yyleng -= len;
                this.offset -= len;
                let oldLines = this.match.split(/(?:\r\n?|\n)/g);
                this.match = this.match.substr(0, this.match.length - 1);
                this.matched = this.matched.substr(0, this.matched.length - 1);

                if (lines.length - 1) {
                    this.yylineno -= lines.length - 1;
                }
                let r = this.yylloc.range;

                this.yylloc = {
                    first_line: this.yylloc.first_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.first_column,
                    last_column: lines ?
                        (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                        + oldLines[oldLines.length - lines.length].length - lines[0].length :
                        this.yylloc.first_column - len,
                };

                if (this.options.ranges) {
                    this.yylloc.range = [r[0], r[0] + this.yyleng - len];
                }
                this.yyleng = this.yytext.length;
                return this;
            },

            // When called from action, caches matched text and appends it on next action
            more: function() {
                this._more = true;
                return this;
            },

            // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
            reject: function() {
                if (this.options.backtrack_lexer) {
                    this._backtrack = true;
                } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                        text: '',
                        token: null,
                        line: this.yylineno,
                    });
                }
                return this;
            },

            // retain first n characters of the match
            less: function(n) {
                this.unput(this.match.slice(n));
            },

            // displays already matched input, i.e. for error messages
            pastInput: function() {
                let past = this.matched.substr(0, this.matched.length - this.match.length);
                return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, '');
            },

            // displays upcoming input, i.e. for error messages
            upcomingInput: function() {
                let next = this.match;
                if (next.length < 20) {
                    next += this._input.substr(0, 20 - next.length);
                }
                return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, '');
            },

            // displays the character position where the lexing error occurred, i.e. for error messages
            showPosition: function() {
                let pre = this.pastInput();
                let c = new Array(pre.length + 1).join('-');
                return pre + this.upcomingInput() + '\n' + c + '^';
            },

            // test the lexed token: return FALSE when not a match, otherwise return token
            test_match: function(match, indexed_rule) {
                let token,
                    lines,
                    backup;

                if (this.options.backtrack_lexer) {
                    // save context
                    backup = {
                        yylineno: this.yylineno,
                        yylloc: {
                            first_line: this.yylloc.first_line,
                            last_line: this.last_line,
                            first_column: this.yylloc.first_column,
                            last_column: this.yylloc.last_column,
                        },
                        yytext: this.yytext,
                        match: this.match,
                        matches: this.matches,
                        matched: this.matched,
                        yyleng: this.yyleng,
                        offset: this.offset,
                        _more: this._more,
                        _input: this._input,
                        yy: this.yy,
                        conditionStack: this.conditionStack.slice(0),
                        done: this.done,
                    };
                    if (this.options.ranges) {
                        backup.yylloc.range = this.yylloc.range.slice(0);
                    }
                }

                lines = match[0].match(/(?:\r\n?|\n).*/g);
                if (lines) {
                    this.yylineno += lines.length;
                }
                this.yylloc = {
                    first_line: this.yylloc.last_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.last_column,
                    last_column: lines ?
                        lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                        this.yylloc.last_column + match[0].length,
                };
                this.yytext += match[0];
                this.match += match[0];
                this.matches = match;
                this.yyleng = this.yytext.length;
                if (this.options.ranges) {
                    this.yylloc.range = [this.offset, this.offset += this.yyleng];
                }
                this._more = false;
                this._backtrack = false;
                this._input = this._input.slice(match[0].length);
                this.matched += match[0];
                token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
                if (this.done && this._input) {
                    this.done = false;
                }
                if (token) {
                    return token;
                } else if (this._backtrack) {
                    // recover context
                    for (let k in backup) {
                        this[k] = backup[k];
                    }
                    return false; // rule action called reject() implying the next rule should be tested instead.
                }
                return false;
            },

            // return next match in input
            next: function() {
                if (this.done) {
                    return this.EOF;
                }
                if (!this._input) {
                    this.done = true;
                }

                let token,
                    match,
                    tempMatch,
                    index;
                if (!this._more) {
                    this.yytext = '';
                    this.match = '';
                }
                let rules = this._currentRules();
                for (let i = 0; i < rules.length; i++) {
                    tempMatch = this._input.match(this.rules[rules[i]]);
                    if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                        match = tempMatch;
                        index = i;
                        if (this.options.backtrack_lexer) {
                            token = this.test_match(tempMatch, rules[i]);
                            if (token !== false) {
                                return token;
                            } else if (this._backtrack) {
                                match = false;
                                continue; // rule action called reject() implying a rule MISmatch.
                            } else {
                                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                                return false;
                            }
                        } else if (!this.options.flex) {
                            break;
                        }
                    }
                }
                if (match) {
                    token = this.test_match(match, rules[index]);
                    if (token !== false) {
                        return token;
                    }
                    // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                    return false;
                }
                if (this._input === '') {
                    return this.EOF;
                } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                        text: '',
                        token: null,
                        line: this.yylineno,
                    });
                }
            },

            // return next match that has a token
            lex: function lex() {
                let r = this.next();
                if (r) {
                    return r;
                } else {
                    return this.lex();
                }
            },

            // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
            begin: function begin(condition) {
                this.conditionStack.push(condition);
            },

            // pop the previously active lexer condition state off the condition stack
            popState: function popState() {
                let n = this.conditionStack.length - 1;
                if (n > 0) {
                    return this.conditionStack.pop();
                } else {
                    return this.conditionStack[0];
                }
            },

            // produce the lexer rule set which is active for the currently active lexer condition state
            _currentRules: function _currentRules() {
                if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
                    return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
                } else {
                    return this.conditions['INITIAL'].rules;
                }
            },

            // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
            topState: function topState(n) {
                n = this.conditionStack.length - 1 - Math.abs(n || 0);
                if (n >= 0) {
                    return this.conditionStack[n];
                } else {
                    return 'INITIAL';
                }
            },

            // alias for begin(condition)
            pushState: function pushState(condition) {
                this.begin(condition);
            },

            // return the number of states currently on the stack
            stateStackSize: function stateStackSize() {
                return this.conditionStack.length;
            },
            options: {},
            performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {
                let YYSTATE = YY_START;
                switch ($avoiding_name_collisions) {
                    case 0:// Skip comment
                        break;
                    case 1:// Skip whitespace
                        break;
                    case 2:// Skip multiline comment
                        break;
                    case 3: throw 'Oh noes, unterminated comment';
                        break;
                    case 4: return 72;
                        break;
                    case 5: return 72;
                        break;
                    case 6: return 72;
                        break;
                    case 7: return 72;
                        break;
                    case 8: return 72;
                        break;
                    case 9: return 72;
                        break;
                    case 10: return 72;
                        break;
                    case 11: return 72;
                        break;
                    case 12: return yy_.yytext;
                        break;
                    case 13: return yy_.yytext;
                        break;
                    case 14: return yy_.yytext;
                        break;
                    case 15: return 19;
                        break;
                    case 16: return 61;
                        break;
                    case 17: return 62;
                        break;
                    case 18: return 60;
                        break;
                    case 19: return 59;
                        break;
                    case 20: return 55;
                        break;
                    case 21: return 57;
                        break;
                    case 22: return 43;
                        break;
                    case 23: return 44;
                        break;
                    case 24: return 66;
                        break;
                    case 25: return 65;
                        break;
                    case 26: return 67;
                        break;
                    case 27: return 68;
                        break;
                    case 28: return 26;
                        break;
                    case 29: return 63;
                        break;
                    case 30: return 64;
                        break;
                    case 31: return 69;
                        break;
                    case 32: return 70;
                        break;
                    case 33: return ',';
                        break;
                    case 34: return 13;
                        break;
                    case 35: return 6;
                        break;
                }
            },
            rules: [/^(?:\/\/(.*)[\r\n]*)/, /^(?:[\s\n]+)/, /^(?:[\/][*][^*]*[*]+([^*\/][^*]*[*]+)*[\/])/, /^(?:[\/][*])/, /^(?:[0-9]*\.[0-9]+)/, /^(?:[0-9]+\.[0-9]*)/, /^(?:(\$|0x)[A-Fa-f0-9]+)/, /^(?:[0-9]+)/, /^(?:"(\\.|[^\"])*")/, /^(?:'.{1}')/, /^(?:'.{4}')/, /^(?:\b(true|false|null)\b)/, /^(?:\b(array|constant|nothing)\b)/, /^(?:\b(function|endfunction|takes|returns|return|call|set|if|then|else|elseif|endif|globals|endglobals|loop|exitwhen|endloop|local|native|type|extends)\b)/, /^(?:\bnot\b)/, /^(?:\b(integer|string|unit|boolean|rect|real|texttag|hashtable|timer|player|group|dialog|boolexpr|location|trigger|item|region|sound|quest|code|destructable|playercolor|camerasetup|gamecache|effect|multiboard|fogmodifier|lightning|trackable|attacktype|itemtype|multiboarditem|event|widget|ability|buff|force|triggercondition|triggeraction|conditionfunc|filterfunc|unitpool|itempool|race|alliancetype|racepreference|gamestate|igamestate|fgamestate|playerstate|playergameresult|unitstate|aidifficulty|eventid|gameevent|playerevent|playerunitevent|unitevent|limitop|widgetevent|dialogevent|unittype|gamespeed|gamedifficulty|gametype|mapflag|mapvisibility|mapsetting|mapdensity|mapcontrol|playerslotstate|volumegroup|camerafield|placement|startlocprio|raritycontrol|blendmode|texmapflags|effecttype|weathereffect|terraindeformation|fogstate|button|questitem|defeatcondition|timerdialog|leaderboard|version|agent|handle|image|ubersplat|damagetype|playerscore|weapontype|soundtype|pathingtype)\b)/, /^(?:\*)/, /^(?:\/)/, /^(?:-)/, /^(?:\+)/, /^(?:\()/, /^(?:\))/, /^(?:\[)/, /^(?:\])/, /^(?:<=)/, /^(?:>=)/, /^(?:==)/, /^(?:!=)/, /^(?:=)/, /^(?:<)/, /^(?:>)/, /^(?:and\b)/, /^(?:or\b)/, /^(?:,)/, /^(?:\b[a-zA-Z][a-zA-Z0-9_]*\b)/, /^(?:$)/],
            conditions: {'INITIAL': {'rules': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], 'inclusive': true}},
        });
        return lexer;
    })();
    parser.lexer = lexer;
    function Parser() {
        this.yy = {};
    }
    Parser.prototype = parser; parser.Parser = Parser;
    return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
    exports.parser = jass;
    exports.Parser = jass.Parser;
    exports.parse = function() {
 return jass.parse(...arguments);
};
    // This part is commented because it doesn't allow me to properly webpack.
    /*
    exports.main = function commonjsMain(args) {
        if (!args[1]) {
            console.log('Usage: '+args[0]+' FILE');
            process.exit(1);
        }
        var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
        return exports.parser.parse(source);
    };
    if (typeof module !== 'undefined' && require.main === module) {
      exports.main(process.argv.slice(1));
    }
    */
}
